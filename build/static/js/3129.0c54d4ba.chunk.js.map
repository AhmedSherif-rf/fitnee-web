{"version":3,"file":"static/js/3129.0c54d4ba.chunk.js","mappings":"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","sources":["Shared/AdminShared/Components/DashboardCard/index.jsx","Pages/AdminPages/Dashboard/index.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\n\r\nconst DashboardCard = (props) => {\r\n  const {\r\n    textOne,\r\n    textTwo,\r\n    cardIcon,\r\n    AdminClass,\r\n    CardBodyClass,\r\n    cardIconClass,\r\n  } = props;\r\n  return (\r\n    <Card className={`onlyBorderRadius h-100   ${AdminClass}`}>\r\n      <CardBody className={`${CardBodyClass}`}>\r\n        <div className=\"d-flex align-items-center justify-content-between\">\r\n          <div className=\"w-100\">\r\n            <div className=\"w-100 text-start px-2 \">\r\n              <h4 className={`fw-bold mb-0`}>{textOne}</h4>\r\n            </div>\r\n            <div className=\"w-100 text-start px-2\">\r\n              <p className=\"small mb-0 mt-2\">{textTwo}</p>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={`d-flex align-items-center justify-content-center textYellow ${cardIconClass}`}\r\n          >\r\n            {cardIcon}\r\n          </div>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DashboardCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { AiOutlineUserSwitch } from \"react-icons/ai\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FaUser, FaRegUser, FaUsers } from \"react-icons/fa\";\r\nimport LoadingScreen from \"../../../HelperMethods/LoadingScreen\";\r\nimport { USER_NOTIFICATIONS_URL } from \"../../../utils/constants\";\r\nimport { ADMIN_DASHBOARD_COUNTERS } from \"../../../utils/constants\";\r\nimport { getUserNotifications } from \"../../../Redux/features/User/userApi\";\r\nimport DashboardCard from \"../../../Shared/AdminShared/Components/DashboardCard\";\r\nimport { getUserCounters } from \"../../../Redux/features/Admin/Dashboard/UserCounterApi\";\r\n\r\nconst Dashboard = (props) => {\r\n  const [counterData, setCounterData] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const { loading } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    fetchUserNotifications();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const fetchUserNotifications = () => {\r\n    const data = {\r\n      apiEndpoint: USER_NOTIFICATIONS_URL,\r\n    };\r\n    dispatch(getUserNotifications(data));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = {\r\n        apiEndpoint: ADMIN_DASHBOARD_COUNTERS,\r\n      };\r\n\r\n      const res = await dispatch(getUserCounters(data));\r\n\r\n      if (res.type === \"getUserCounters/fulfilled\") {\r\n        setCounterData(res.payload.data);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [dispatch]);\r\n  console.log(counterData, \"alksdjfjakjsdlfkaljdskflasdjlkfk\");\r\n  return (\r\n    <Container>\r\n      {loading === \"pending\" && <LoadingScreen />}\r\n      <Row className=\"py-3\">\r\n        <Col xl={3} lg={4} md={6} className=\"mb-3\">\r\n          <DashboardCard\r\n            AdminClass=\"AdminCard\"\r\n            CardBodyClass=\"AdminCardBody\"\r\n            cardIconClass=\"cardIcon\"\r\n            cardIcon={<FaUser size={60} />}\r\n            textOne={counterData.active_users_count}\r\n            textTwo=\"Active User\"\r\n          />\r\n        </Col>\r\n        <Col xl={3} lg={4} md={6} className=\"mb-3\">\r\n          <DashboardCard\r\n            AdminClass=\"AdminCard\"\r\n            CardBodyClass=\"AdminCardBody\"\r\n            cardIconClass=\"cardIcon\"\r\n            cardIcon={<FaRegUser size={60} />}\r\n            textOne={counterData.inactive_users_count}\r\n            textTwo=\"Inactive Users\"\r\n          />\r\n        </Col>\r\n        <Col xl={3} lg={4} md={6} className=\"mb-3\">\r\n          <DashboardCard\r\n            AdminClass=\"AdminCard\"\r\n            CardBodyClass=\"AdminCardBody\"\r\n            cardIconClass=\"cardIcon\"\r\n            cardIcon={<FaUsers size={65} />}\r\n            textOne={counterData.trainees_count}\r\n            textTwo=\"Subscribers\"\r\n          />\r\n        </Col>\r\n        <Col xl={3} lg={4} md={6} className=\"mb-3\">\r\n          <DashboardCard\r\n            AdminClass=\"AdminCard\"\r\n            CardBodyClass=\"AdminCardBody\"\r\n            cardIconClass=\"cardIcon\"\r\n            cardIcon={<AiOutlineUserSwitch size={65} />}\r\n            textOne={counterData.resubscribers_count}\r\n            textTwo=\"Re-Subscribers\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["props","textOne","textTwo","cardIcon","AdminClass","CardBodyClass","cardIconClass","_jsx","Card","className","concat","children","CardBody","_jsxs","_useState","useState","_useState2","_slicedToArray","counterData","setCounterData","dispatch","useDispatch","loading","useSelector","state","user","useEffect","fetchUserNotifications","data","apiEndpoint","USER_NOTIFICATIONS_URL","getUserNotifications","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","ADMIN_DASHBOARD_COUNTERS","getUserCounters","sent","type","payload","stop","apply","arguments","console","log","Container","LoadingScreen","Row","Col","xl","lg","md","DashboardCard","FaUser","size","active_users_count","FaRegUser","inactive_users_count","FaUsers","trainees_count","AiOutlineUserSwitch","resubscribers_count"],"sourceRoot":""}