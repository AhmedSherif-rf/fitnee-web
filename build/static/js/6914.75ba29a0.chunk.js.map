{"version":3,"file":"static/js/6914.75ba29a0.chunk.js","mappings":"2LAkBA,UAdqC,WACnC,OACEA,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAC,UACRF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,UAAS,yBAA2BF,UACvCF,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,EAAEJ,UACTF,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAACH,UAAU,cAAaF,UAC3BF,EAAAA,EAAAA,KAACQ,EAAAA,EAAa,WAM1B,C,yGCLMC,EAAe,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAAoBC,EAAAA,EAAAA,IAAe,IAA3BC,EAACF,EAADE,EAAGC,EAAIH,EAAJG,KACXC,GAAmCC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,IAAI,IAA5DC,EAAaJ,EAAbI,cAAeC,EAAOL,EAAPK,SAEvBC,EAAAA,EAAAA,YAAU,WACRC,GAEF,GAAG,IAEH,IAYMA,EAAyB,WAC7B,IAAMC,EAAO,CACXC,YAAaC,EAAAA,wBAEfhB,GAASiB,EAAAA,EAAAA,IAAqBH,GAChC,EAEA,OACEI,EAAAA,EAAAA,MAAA,OAAKxB,UAAS,GAAAyB,OAAKd,EAAKe,MAAK,UAAS5B,SAAA,CACvB,YAAZmB,IAAyBrB,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,KACxC/B,EAAAA,EAAAA,KAAA,MAAII,UAAU,mBAAkBF,SAAEY,EAAE,8BAEV,IAAzBM,EAAcY,QACbhC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kDAAiDF,UAC9DF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,OAAMF,SAAEY,EAAE,kCAGzBM,EAAca,KAAI,SAACC,EAAcC,GAAK,OACpCnC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAAaH,UAAS,0BAA4BF,UACrD0B,EAAAA,EAAAA,MAAA,OACExB,UAAS,oBAAAyB,QACNK,EAAaE,SAAW,kBACxBlC,SAAA,EAEHF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,aAAYF,SACP,QAAfa,EAAKe,MACU,OAAZI,QAAY,IAAZA,OAAY,EAAZA,EAAcG,KACF,OAAZH,QAAY,IAAZA,OAAY,EAAZA,EAAcI,aAItBtC,EAAAA,EAAAA,KAAA,OACEI,UAAS,QAAAyB,OACQ,QAAfd,EAAKe,MAAkB,WAAa,cACnC5B,WAEW,OAAZgC,QAAY,IAAZA,GAAAA,EAAcE,WACdpC,EAAAA,EAAAA,KAAA,OAAKuC,QAAS,kBAlDC,SAACC,GAC9B,IAAMhB,EAAO,CACXC,YAAY,GAADI,OAAKH,EAAAA,wBAAsBG,OAAGW,EAAE,KAC3CC,YAAaC,KAAKC,UAAU,CAAEP,SAAS,KAEzC1B,GAASkC,EAAAA,EAAAA,IAA2BpB,IAAOqB,MAAK,SAACC,GAC9B,yCAAbA,EAAIC,MACNxB,GAEJ,GACF,CAwCoCyB,CAAmC,OAAZd,QAAY,IAAZA,OAAY,EAAZA,EAAcM,GAAG,EAACtC,UAC3DF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mCAAkCF,SAC5CY,EAAE,+BAtBJqB,EA4BJ,MAKjB,EAEA,KAAec,EAAAA,EAAAA,MAAKxC,E","sources":["Pages/TraineePages/Notifications/index.jsx","Shared/Notification/index.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Card, Col, Container, Row } from \"reactstrap\";\r\nimport Notifications from \"../../../Shared/Notification\";\r\n\r\nconst ServiceProviderNotifications = () => {\r\n  return (\r\n    <Container>\r\n      <Row className={`justify-content-center`}>\r\n        <Col md={7}>\r\n          <Card className=\"contentCard\">\r\n            <Notifications />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ServiceProviderNotifications;\r\n","import { Card } from \"reactstrap\";\r\nimport React, { memo, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport LoadingScreen from \"../../HelperMethods/LoadingScreen\";\r\nimport { USER_NOTIFICATIONS_URL } from \"../../utils/constants\";\r\nimport {\r\n  markUserNotificationAsRead,\r\n  getUserNotifications,\r\n} from \"../../Redux/features/User/userApi\";\r\n\r\nconst Notification = () => {\r\n  const dispatch = useDispatch();\r\n  const { t, i18n } = useTranslation(\"\");\r\n  const { notifications, loading } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    fetchUserNotifications();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const markNotificationAsRead = (id) => {\r\n    const data = {\r\n      apiEndpoint: `${USER_NOTIFICATIONS_URL}${id}/`,\r\n      requestData: JSON.stringify({ is_read: true }),\r\n    };\r\n    dispatch(markUserNotificationAsRead(data)).then((res) => {\r\n      if (res.type === \"markUserNotificationAsRead/fulfilled\") {\r\n        fetchUserNotifications();\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchUserNotifications = () => {\r\n    const data = {\r\n      apiEndpoint: USER_NOTIFICATIONS_URL,\r\n    };\r\n    dispatch(getUserNotifications(data));\r\n  };\r\n\r\n  return (\r\n    <div className={`${i18n.dir()} w-100`}>\r\n      {loading === \"pending\" && <LoadingScreen />}\r\n      <h5 className=\"fw-bold my-2 p-4\">{t(\"topBar.notificationsText\")}</h5>\r\n\r\n      {notifications.length === 0 ? (\r\n        <div className=\"d-flex align-items justify-content-center h-100\">\r\n          <p className=\"my-4\">{t(\"topBar.noNotificationsText\")}</p>\r\n        </div>\r\n      ) : (\r\n        notifications.map((notification, index) => (\r\n          <Card key={index} className={`ms-1 border-0 px-2 mb-1`}>\r\n            <div\r\n              className={`BorderRadius p-3 ${\r\n                !notification.is_read && \"bgNotification\"\r\n              }`}\r\n            >\r\n              <div>\r\n                <p className=\"mb-0 small\">\r\n                  {i18n.dir() === \"ltr\"\r\n                    ? notification?.body\r\n                    : notification?.body_ar}\r\n                </p>\r\n              </div>\r\n\r\n              <div\r\n                className={`mx-1 ${\r\n                  i18n.dir() === \"ltr\" ? \"text-end\" : \"text-start\"\r\n                }`}\r\n              >\r\n                {!notification?.is_read && (\r\n                  <div onClick={() => markNotificationAsRead(notification?.id)}>\r\n                    <p className=\"small fw-bold mb-0 cursorPointer\">\r\n                      {t(\"topBar.markAsRead\")}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Notification);\r\n"],"names":["_jsx","Container","children","Row","className","Col","md","Card","Notifications","Notification","dispatch","useDispatch","_useTranslation","useTranslation","t","i18n","_useSelector","useSelector","state","user","notifications","loading","useEffect","fetchUserNotifications","data","apiEndpoint","USER_NOTIFICATIONS_URL","getUserNotifications","_jsxs","concat","dir","LoadingScreen","length","map","notification","index","is_read","body","body_ar","onClick","id","requestData","JSON","stringify","markUserNotificationAsRead","then","res","type","markNotificationAsRead","memo"],"sourceRoot":""}